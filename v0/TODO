- make default tone mono in let-bindings

- stop substituting everything immediately during typechecking so we don't get
  800-char long type names in error messages

- add recursive types

- remove subtyping? would simplify language.

- add some type constructors & intro & elim forms for them
  - flat lattices, (Flat A) = bottom <= .... A ... <= top
  - lexical sums (A <+ B)? lexical products (A <* B)?
  - tensor products of semilats??! (don't know of good impl strategy.)

- allow pattern let-binding (for irrefutable patterns)
  - move pat-irrefutable? into elab.rkt, since it requires type-checking.

- add tonicity to e-case? problem here is that some things we *can't*
  case-examine {mono,anti}tonically, for example, bools.

EVENTUALLY
- implement polymorphism

- a reasonable way of handling binding. maybe abt.rkt? in particular, the way we
  handle defined types is annoying: we have to traverse every type to substitute
  away all currently defined type-names as soon as we encounter it, because
  nothing handles (t-name _) properly.

TO DOCUMENT
- update README.md

- nonlinear patterns & equality patterns

  nonlinear patterns: multiple uses of same variable check for equality.

  equality patterns: use when you want to check equality with something that is
  *not* a variable bound in the same pattern.

  note that variables bound in a pattern are *not* in the scope of expressions
  within that pattern. for example:

      (let [(x = 0)] (case foo [(cons x (= x)) x]))

  the (cons x (= x)) will match only if foo is of the form (cons _ 0), and will
  bind x to the first argument of the cons.
