(* -*- mode: sml -*- *)

(* val eq : {str} -> {str} -> {str}
 * fun eq a b =                    (\* ugh. *\) *)

(* fun subset a b = a ∨ b = b *)

val two : nat
val two = 2

val add3 : nat -> nat
fun add3 x = x + 3

val somefns : {nat -> nat}
val somefns = {add3, (-) 4, (fn x => x)}

val or : bool ~> bool ~> bool
fun or x y = x lub y

val and : bool ~> bool ~> bool
fun and x y = when (x) y

val not : bool ->- bool
fun not x = unless (x) true

(* any two of `not', `when', and `unless' would let us derive the third
 * (although polymorphism might be an issue for typechecking it).
 * for example: *)
val unlessBool : bool ->- bool ~> bool
fun unlessBool c x = when (not c) x

(* with antitone negation, we can write < properly!
 * previously, had to do:
 * fun (x < y) = x + 1 <= y
 *)
val (<) : nat ->- nat ~> bool
fun (x < y) = not (y <= x)

(* NB: this (incorrect) implementation of < gives an UTTERLY useless error
 * message (TODO: fix) about tonicities mono & anti having no lub:
 *
 * fun (x < y) = not (x <= y)
 *)


(* representing booleans as sets of units *)
val tt, ff : {()}
val tt = {()}
val ff = {}

val conj : {()} ~> {()} ~> {()}
fun conj x y = ⋁(_ ∈ x, _ ∈ y) tt
(* alternative implementations: *)
(* fun conj x y = (tt | _ ∈ x, _ ∈ y) *)
(* fun conj x y = {() | _ ∈ x, _ ∈ y} *)

(* Neel calls this "guard" *)
val bool2set : bool ~> {()}
fun bool2set x = when (x) tt

val set2bool : {()} ~> bool
fun set2bool x = () in? x
(* fun set2bool x = ⋁(_ in x) true *) (* alternative *)

(* kind of a hack *)
val negate : {()} ->- {()}
fun negate x = unless (set2bool x) tt


(* operations on sets of naturals & strings *)
val nat_member : nat -> {nat} ~> bool
fun nat_member a s = (a = x | x in s)

(* or, using equality patterns *)
val str_member : str -> {str} ~> bool
fun str_member a s = (true | .a in s)

val nat_setminus : {nat} ~> {nat} ->- {nat}
fun nat_setminus a b = {x | x in a, not (nat_member x b)}

(* set comprehension demos *)
val some_nats : {nat}
val some_nats = ⋁(x ∈ {1,2,3}) {x, x + 10}

val powers_upto : nat -> nat ~> {nat}
fun powers_upto b n = fix s is {1} ∨ {b*x | x in s, (b*x) <= n}

(* map & filter *)
val nat_map : (nat -> nat) -> {nat} ~> {nat}
fun nat_map f a = {f x | x ∈ a}

val nat_filter : (nat -> bool) ~> {nat} ~> {nat}
fun nat_filter p a = {x | x ∈ a, p x}

(* can also be invoked with primitive `cross' / ** / × *)
val nat_cross : {nat} ~> {nat} ~> {nat * nat}
fun nat_cross a b = {(x,y) | x ∈ a, y ∈ b}


(* aggregation demo
 * aggregate : (a -> b) -> c -> (b -> c -> c) -> {a} -> c
 * for a an eqtype
 *)
val sum_lengths: {str} -> nat
fun sum_lengths s = aggregate strlen 0 (+) s


(* record demos & SQL-like examples *)
type person = [name: str, age: nat]
val john, mary: person
val john = [name: "John", age: 27]
val mary = [name: "Mary", age: 40]

val ages: {str: nat}
val ages = {john.name: john.age, mary.name: mary.age}

val salaries = { [person: "john", salary: 10], [person: "mary", salary: 10] }
val employee_depts = { [person: "john", department: "sales"]
                     , [person: "mary", department: "engineering"] }

(* wow, this is awkward. *)
val get_salary: [person: str, salary: nat] -> nat
fun get_salary x = x.salary

val salary_total: nat
val salary_total = aggregate get_salary 0 (+) salaries
(* maybe syntax like:
 * for (x in salaries) aggregate (0, accum => accum + x.salary) *)

(* val salary_total_per_department: {str, nat}
 * val salary_total_per_department = ??? *)


(* some things I originally thought datafun couldn't do, but it can!
 * only using unbounded fixed-points, though. *)
val nat_subsets : {nat} ~> {{nat}}
fun nat_subsets n =
  fix s = {{}}
        ∨ {{x} | x in n}
        ∨ {x ∨ y | x in s, y in s}

(* one-element-at-a-time version *)
val nat_subsets2: {nat} →⁺ {{nat}}
fun nat_subsets2 univ =
  fix subs = {{}} ∨ {s ∨ {x} | s in subs, x in univ}

(* upto n = {x | x <= n}; includes upper bound
 * below n = {x | x < n}; excludes upper bound
 *)
val upto, below : nat ~> {nat}
fun upto n = fix s = {0} ∨ {x+1 | x in s, x < n}
fun below n = {x | x ∈ upto n, x < n}

(* range i j = {x | i <= x <= j}; inclusive. *)
val range : nat ->- nat ~> {nat}
fun range i j = nat_setminus (upto j) (below i)


(* ancestors *)
val person = { "constable", "harper", "arbob", "aldrich", "reynolds", "neel"
             , "rntz" }

val advisor = { ("constable", "harper"), ("harper", "arbob")
              , ("reynolds", "neel"), ("aldrich", "neel"), ("neel", "rntz") }

val ancestor : {str, str}
(* fix ancestor = advisor ∨ {(a,c) | (a,b) ∈ advisor, (.b,c) ∈ ancestor} *)
fix ancestor = advisor ∨ (ancestor • ancestor)


(* relation composition. can also use primitive operator (•) / `compose'. *)
val str_compose : {str, str} ~> {str, str} ~> {str, str}
fun str_compose x y = {(a,c) | (a,b) in x, (.b,c) in y}

(* makes a reflexive relation on a set *)
val refl : {str} ~> {str, str}
fun refl x = {(x,x) | x in x}

(* makes a relation symmetric *)
val symm : {str,str} ~> {str,str}
fun symm x = for ((a,b) in x) {(a,b), (b,a)}

(* transitive closure *)
val transitive : {str,str} ~> {str,str}
fun transitive r = fix t is r ∨ (t • t)

val ancestor2 = transitive advisor

(* reflexive, transitive closure *)
val dagToPreorder : {str} ~> {str, str} ~> {str, str}
fun dagToPreorder v e = fix self is (refl v) lub (self • e)

val ancestor3 = dagToPreorder person advisor

(* reachability *)
val reachable : {str, str} ~> str -> str -> bool
fun reachable r a b = let val domain = {x | (x,_) in r}
                      in (a,b) in? dagToPreorder domain r

val reachableFrom : {str,str} ~> str -> {str}
fun reachableFrom r start =
  fix self is {start} lub {b | (a,b) in r, a in? self}


(* CYK parsing! *)
type sym = str
type rule = String(str) | Cat(sym, sym)
type grammar = {sym × rule}

(* (a,i,j) represents that symbol a produces the substring w[i..j] *)
type item = sym × nat × nat

val parse : str -> grammar ~> {sym}
fun parse w g =
  let disc val len = strlen w
      val state : {item}
      fix state = {(a,i,k) | (a, Cat(b,c)) ∈ g
                           , (.b,i,j) ∈ state, (.c,.j,k) ∈ state}
                ∨ (for ((a, String(s)) ∈ g)
                   let disc val n = strlen s
                   in {(a,i,i+n) | i ∈ range 0 (len-n), s = substr w i (i+n)})
  in {a | (a,0,.len) ∈ state}

(* a grammar to test on *)
val gram_hello = { ("Start", Cat("H", "W"))
                 , ("H", String("hello"))
                 , ("W", String("world")) }

val test_string = "helloworld"


(* the WHILE language & static analysis *)
type label = nat
type var = str

type bool_op = EQ | LE
type arith_op = ADD | SUB | MUL | DIV
type imm = Var(var) | Num(nat)
type expr = Imm(imm) | Arith(arith_op, imm, imm) | Test(bool_op, imm, imm)
type stmt = Skip | Assign(var, expr) | If(expr, label, label)
type code = {label: stmt}

(* a trivial example WHILE program *)
val prog1 : code
val prog1 = { 0: Assign("a", Imm(Num(2)))
            , 1: Assign("b", Imm(Var("a")))
            }

(* basic properties *)
val imm_vars : imm -> {var}
val expr_vars : expr -> {var}
val uses : stmt -> {var}
val defines : stmt -> {var}
fun imm_vars i = case i | Var(v) => {v} | Num(_) => {}
fun expr_vars e =
  case e | Imm(i) => imm_vars i
         | Arith(_, a, b) | Test(_, a, b) => imm_vars a ∨ imm_vars b
fun uses s = case s | Assign(_,e) | If(e,_,_) => expr_vars e | _ => {}
fun defines s = case s | Assign(v,_) => {v} | _ => {}

(* code flow *)
type flow = {label, label}

val flow : code -> flow
fun flow code = for ((i,s) ∈ entries code)
                case s | If(_,j,k) => {(i,j), (i,k)}
                       | _ => {(i,i+1) | i+1 ∈? keys code}

(* live variable analysis
 *
 * PROBLEM: really, I need an exit label & what vars are live there.
 *)
val live : code -> flow -> {label, var}
fun live code flow =
  fix self = for ((i,s) ∈ entries code)
               {(i,v) | v ∈ uses s}
             ∨ {(i,v) | (.i,j) ∈ flow, (.j,v) ∈ self, not (v ∈? defines s)}

(* reaching definitions analysis
 * produces a set of tuples (i, l, v)
 * meaning: the assignment to `v' at label `l' may reach label `i'
 *
 * hm. in this versoin, a label can see its own variable definitions!
 *)
val rd : code -> flow -> {label, label, var}
fun rd code flow =
  fix self = for ((i,s) ∈ entries code)
               {(i, i, v) | v ∈ defines s}
             ∨ {(i, l, v) | (j, .i) ∈ flow, (.j, l, v) ∈ self
                          , not (v ∈? defines s)}

(* possible value analysis *)
(* type values = {label * var: flat nat} *)


(* TODO: an SCC-finding algorithm, or similar *)
val sccs : {nat, nat} →⁺ {{nat}} × (nat → {nat}) × {{nat}, {nat}}
fun sccs graph = ({}, (fn x => {}), {})
