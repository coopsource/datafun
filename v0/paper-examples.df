(* -*- mode: sml -*- *)

(* ---------- Helper functions (Figure 3 in the paper) ---------- *)
val not: bool → bool
fun not x = if x then false else true

val range: nat → nat →⁺ {nat}
fun range i j = ⋁(i <= j) fix s is
                 {i} ∨ {x+1 | x in s, x+1 <= j}

val length = strlen
val substring = substr


(* ---------- 3.1 Filtering, mapping, and cross products ---------- *)
val map: (nat → nat) → {nat} →⁺ {nat}
fun map f a = {f x | x ∈ a}

val filter: (nat → bool) →⁺ {nat} →⁺ {nat}
fun filter f a = {x | x ∈ a, f x}

val cross: {nat} →⁺ {nat} →⁺ {nat × nat}
fun cross x y = {(a,b) | a ∈ x, b ∈ y}


(* ---------- 3.2 Equality, membership, and intersection ---------- *)
val mem: nat → {nat} →⁺ bool
fun mem x a = for y ∈ a: x = y

(* unlike the paper, which uses nonlinear pattern-matching to imply tests for
 * equality, we have to explicitly annotate patterns that test for equality.
 * We do this by preceding them with a dot. *)
val intersect: {nat} →⁺ {nat} →⁺ {nat}
fun intersect a b = {x | x ∈ a, !x ∈ b}


(* ---------- 3.3 Composition of relations ---------- *)
val compose: {nat × str} →⁺ {str × nat} →⁺ {nat × nat}
fun compose r s = {(a,c) | (a,b) ∈ r, (!b,c) ∈ s}


(* ---------- 3.4 Transitive closure ---------- *)
type person = Earendil | Elrond | Arwen
val parent, ancestor: {person × person}
val parent = {(Earendil, Elrond), (Elrond, Arwen)}
(* for convenience there is a built-in polymorphic composition operator, • *)
val ancestor = fix x is parent ∨ (x • x)

(* 3.4.1 Transitive closure with an upper bound
 *
 * The implementation doesn't support checking upper bounds; it just iterates
 * until a fixed-point is reached, possibly failing to terminate.
 *)
val persons: {str}
val persons = {"eärendil", "elrond", "arwen"}
val str_parent, str_ancestor: {str × str}
val str_parent = {("eärendil", "elrond"), ("elrond", "arwen")}
val str_ancestor = fix x is str_parent ∨ (x • x)

(* 3.4.2 Generic transitive closure *)
val trans : {str × str} →⁺ {str × str}
fun trans e = fix x is e ∨ (x • x)


(* ---------- 3.5 CYK parsing ---------- *)
type sym = str
type rule = String(str) | Concat(sym, sym)
type grammar = {sym × rule}
type fact = sym × nat × nat

val iter : str → grammar →⁺ {fact} →⁺ {fact}
fun iter text g chart =
    { (a,i,k) | (a, Concat(b,c)) ∈ g, (!b,i,j) ∈ chart, (!c,!j,k) ∈ chart }
  ∨ { (a, i, i + strlen s)
    | (a, String(s)) ∈ g
    , i ∈ range 0 (length text - length s)
    , s = substring text i (i + length s) }

val parse : str → grammar →⁺ {sym}
fun parse text g =
  let val chart = fix c : {fact} is iter text g c
  (* we can test equality with arbitrary expressions (of equality type),
   * not just variables, by prefixing them with "." in a pattern. *)
  in {a | (a, 0, !(length text)) ∈ chart}


(* TODO: an example grammar *)


(* ---------- 3.6 Dataflow analysis ---------- *)
type var = str
type label = nat
type oper = Eq | Le | Add | Sub | Mul | Div
type atom = Var(var) | Num(nat)
type expr = Atom(atom) | Apply(oper, atom, atom)
type stmt = Assign(var, expr) | If(expr, label, label)
type program = {label × stmt}

val labels : program → {label}
fun labels p = {l | (l,_) ∈ p}

val defines : stmt → {var}
fun defines stmt = case stmt | Assign(x,_) => {x} | _ => {}

val atom_vars : atom -> {var}
val expr_vars : expr -> {var}
val uses : stmt -> {var}
fun atom_vars x = case x | Var(x) => {x} | _ => {}
fun expr_vars x = case x | Atom(a) => atom_vars a
                         | Apply(_,a,b) => atom_vars a ∨ atom_vars b
fun uses stmt = case stmt | Assign(_,e) | If (e,_,_) => expr_vars e

val vars : program → {var}
fun vars p = ⋁((_,stmt) ∈ p) uses stmt ∨ defines stmt

type flow = {label × label}
val flow : program → flow
fun flow c = ⋁((i,s) ∈ c)
             case s | If(_, j, k) => {(i,j), (i,k)}
                    | _ => {(i, i+1) | i+1 ∈? labels c}

val live : program → flow →⁺ {label × var}
fun live code flow =
  fix live is
  ⋁ ((i,stmt) ∈ code)
    {(i,v) | v ∈ uses stmt}
  ∨ {(i,v) | (!i,j) ∈ flow, (!j,v) ∈ live, not (v ∈? defines stmt)}

val reachingDefinitions : program → flow → {(label × var) × label}
fun reachingDefinitions code flow =
  fix rd is
  ⋁ ((i,stmt) ∈ code)
    {((i,v),i) | v ∈ defines stmt}
  ∨ {((l,v),i) | (j,!i) ∈ flow
               , ((l,v),!j) ∈ rd
               , not (v ∈? defines stmt) }
